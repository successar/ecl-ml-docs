{
    "root": {
        "examples": {
            "sentilyze": {
                "types.ecl": "Examples/Sentilyze/Types.ecl.html",
                "preprocess.ecl": "Examples/Sentilyze/PreProcess.ecl.html",
                "naivebayes": {
                    "classify.ecl": "Examples/Sentilyze/NaiveBayes/Classify.ecl.html",
                    "model.ecl": "Examples/Sentilyze/NaiveBayes/Model.ecl.html"
                },
                "keywordcount": {
                    "classify.ecl": "Examples/Sentilyze/KeywordCount/Classify.ecl.html",
                    "generate.ecl": "Examples/Sentilyze/KeywordCount/Generate.ecl.html"
                },
                "strings.ecl": "Examples/Sentilyze/Strings.ecl.html"
            }
        },
        "pbblas": {
            "mu.ecl": "PBblas/MU.ecl.html",
            "pb_daxpy.ecl": "PBblas/PB_daxpy.ecl.html",
            "vector2diag.ecl": "PBblas/Vector2Diag.ecl.html",
            "block": {
                "make_diag.ecl": "PBblas/Block/make_diag.ecl.html",
                "apply2cells.ecl": "PBblas/Block/Apply2Cells.ecl.html",
                "icellfunc.ecl": "PBblas/Block/ICellFunc.ecl.html",
                "extract_tri.ecl": "PBblas/Block/Extract_Tri.ecl.html",
                "dgetf2.ecl": "PBblas/Block/dgetf2.ecl.html",
                "make_vector.ecl": "PBblas/Block/make_vector.ecl.html",
                "trace.ecl": "PBblas/Block/trace.ecl.html",
                "extract_diag.ecl": "PBblas/Block/extract_diag.ecl.html"
            },
            "autobvmap.ecl": "PBblas/AutoBVMap.ecl.html",
            "tests": {
                "maptest.ecl": "PBblas/Tests/MapTest.ecl.html",
                "diffreport.ecl": "PBblas/Tests/DiffReport.ecl.html",
                "solve.ecl": "PBblas/Tests/Solve.ecl.html",
                "multiply.ecl": "PBblas/Tests/Multiply.ecl.html",
                "factor.ecl": "PBblas/Tests/Factor.ecl.html"
            },
            "constants.ecl": "PBblas/Constants.ecl.html",
            "matrix_map.ecl": "PBblas/Matrix_Map.ecl.html",
            "apply2elements.ecl": "PBblas/Apply2Elements.ecl.html",
            "maker8set.ecl": "PBblas/MakeR8Set.ecl.html",
            "lapack": {
                "dpotf2.ecl": "PBblas/LAPACK/dpotf2.ecl.html"
            },
            "pb_dgemm.ecl": "PBblas/PB_dgemm.ecl.html",
            "hadamardproduct.ecl": "PBblas/HadamardProduct.ecl.html",
            "blas": {
                "daxpy.ecl": "PBblas/BLAS/daxpy.ecl.html",
                "dasum.ecl": "PBblas/BLAS/dasum.ecl.html",
                "dtrsm.ecl": "PBblas/BLAS/dtrsm.ecl.html",
                "dgemm.ecl": "PBblas/BLAS/dgemm.ecl.html",
                "dsyrk.ecl": "PBblas/BLAS/dsyrk.ecl.html",
                "dscal.ecl": "PBblas/BLAS/dscal.ecl.html"
            },
            "types.ecl": "PBblas/Types.ecl.html",
            "pb_dpotrf.ecl": "PBblas/PB_dpotrf.ecl.html",
            "pb_dgetrf.ecl": "PBblas/PB_dgetrf.ecl.html",
            "pb_extract_tri.ecl": "PBblas/PB_Extract_Tri.ecl.html",
            "pb_dasum.ecl": "PBblas/PB_dasum.ecl.html",
            "pb_dbvrk.ecl": "PBblas/PB_dbvrk.ecl.html",
            "pb_dscal.ecl": "PBblas/PB_dscal.ecl.html",
            "pb_dtrsm.ecl": "PBblas/PB_dtrsm.ecl.html",
            "pb_dbvmm.ecl": "PBblas/PB_dbvmm.ecl.html",
            "pb_dtran.ecl": "PBblas/PB_dtran.ecl.html",
            "ielementfunc.ecl": "PBblas/IElementFunc.ecl.html",
            "imatrix_map.ecl": "PBblas/IMatrix_Map.ecl.html"
        },
        "vl": {
            "types.ecl": "VL/Types.ecl.html",
            "chart.ecl": "VL/Chart.ecl.html",
            "d3.ecl": "VL/D3.ecl.html",
            "swapaxes.ecl": "VL/SwapAxes.ecl.html",
            "google.ecl": "VL/Google.ecl.html",
            "styles.ecl": "VL/Styles.ecl.html",
            "formatcartesiandata.ecl": "VL/FormatCartesianData.ecl.html",
            "google_samples.ecl": "VL/Google_Samples.ecl.html",
            "d3_samples.ecl": "VL/D3_Samples.ecl.html",
            "geo.ecl": "VL/Geo.ecl.html"
        },
        "testingsuite": {
            "testrandomforestclassifierd.ecl": "TestingSuite/TestRandomForestClassifierD.ecl.html",
            "testrandomforestclassifierc.ecl": "TestingSuite/TestRandomForestClassifierC.ecl.html",
            "utils": {
                "types.ecl": "TestingSuite/Utils/Types.ecl.html",
                "totraining.ecl": "TestingSuite/Utils/ToTraining.ecl.html",
                "getnumberoffields.ecl": "TestingSuite/Utils/GetNumberofFields.ecl.html",
                "student_t_test.ecl": "TestingSuite/Utils/Student_T_Test.ecl.html",
                "generatecode.ecl": "TestingSuite/Utils/GenerateCode.ecl.html",
                "totesting.ecl": "TestingSuite/Utils/ToTesting.ecl.html",
                "generatecode_k.ecl": "TestingSuite/Utils/GenerateCode_k.ecl.html",
                "generatecode_r.ecl": "TestingSuite/Utils/GenerateCode_R.ecl.html"
            },
            "testlinearregression.ecl": "TestingSuite/TestLinearRegression.ecl.html",
            "testkmeans.ecl": "TestingSuite/TestKmeans.ecl.html",
            "regression": {
                "datasets": {
                    "friedman1ds.ecl": "TestingSuite/Regression/Datasets/friedman1DS.ecl.html",
                    "servods.ecl": "TestingSuite/Regression/Datasets/servoDS.ecl.html",
                    "housingds.ecl": "TestingSuite/Regression/Datasets/housingDS.ecl.html",
                    "abaloneds.ecl": "TestingSuite/Regression/Datasets/AbaloneDS.ecl.html",
                    "friedman2ds.ecl": "TestingSuite/Regression/Datasets/friedman2DS.ecl.html",
                    "friedman3ds.ecl": "TestingSuite/Regression/Datasets/friedman3DS.ecl.html",
                    "testdecisiontreeregressor.ecl": "TestingSuite/Regression/Datasets/TestDecisionTreeRegressor.ecl.html"
                },
                "testlinearregression.ecl": "TestingSuite/Regression/TestLinearRegression.ecl.html"
            },
            "slimmer_testall.ecl": "TestingSuite/slimmer_TestAll.ecl.html",
            "benchmarkresults": {
                "rfc_performance_scores_c.ecl": "TestingSuite/BenchmarkResults/rfc_performance_scores_c.ecl.html",
                "rfc_performance_scores_d.ecl": "TestingSuite/BenchmarkResults/rfc_performance_scores_d.ecl.html",
                "kmeans_performance_scores.ecl": "TestingSuite/BenchmarkResults/kmeans_performance_scores.ecl.html",
                "dtc_performance_scores.ecl": "TestingSuite/BenchmarkResults/dtc_performance_scores.ecl.html"
            },
            "testdecisiontreeclassifier.ecl": "TestingSuite/TestDecisionTreeClassifier.ecl.html",
            "classification": {
                "datasets": {
                    "continious_ecolids.ecl": "TestingSuite/Classification/Datasets/continious_ecoliDS.ecl.html",
                    "discrete_letterrecognitionds.ecl": "TestingSuite/Classification/Datasets/discrete_letterrecognitionDS.ecl.html",
                    "continious_waveformds.ecl": "TestingSuite/Classification/Datasets/continious_waveformDS.ecl.html",
                    "discrete_vehicleds.ecl": "TestingSuite/Classification/Datasets/discrete_VehicleDS.ecl.html",
                    "discrete_housevoteds.ecl": "TestingSuite/Classification/Datasets/discrete_houseVoteDS.ecl.html",
                    "continious_ringnormdatads.ecl": "TestingSuite/Classification/Datasets/continious_ringnormDataDS.ecl.html",
                    "discrete_satimagesds.ecl": "TestingSuite/Classification/Datasets/discrete_satimagesDS.ecl.html",
                    "discrete_liverds.ecl": "TestingSuite/Classification/Datasets/discrete_liverDS.ecl.html",
                    "discrete_soybeands.ecl": "TestingSuite/Classification/Datasets/discrete_soybeanDS.ecl.html",
                    "discrete_germands.ecl": "TestingSuite/Classification/Datasets/discrete_GermanDS.ecl.html",
                    "continious_glassds.ecl": "TestingSuite/Classification/Datasets/continious_glassDS.ecl.html",
                    "continious_ionosphereds.ecl": "TestingSuite/Classification/Datasets/continious_ionosphereDS.ecl.html",
                    "continious_segmentationds.ecl": "TestingSuite/Classification/Datasets/continious_segmentationDS.ecl.html"
                },
                "testlogisticregression.ecl": "TestingSuite/Classification/TestLogisticRegression.ecl.html",
                "testrandomforestclassificationd.ecl": "TestingSuite/Classification/TestRandomForestClassificationD.ecl.html",
                "testrandomforestclassificationc.ecl": "TestingSuite/Classification/TestRandomForestClassificationC.ecl.html",
                "testdecisiontreeclassifier.ecl": "TestingSuite/Classification/TestDecisionTreeClassifier.ecl.html"
            },
            "clustering": {
                "datasets": {
                    "ionek_f_four_c_fourds.ecl": "TestingSuite/Clustering/Datasets/ionek_f_four_c_fourDS.ecl.html",
                    "ionek_f_sixteen_c_eightds.ecl": "TestingSuite/Clustering/Datasets/ionek_f_sixteen_c_eightDS.ecl.html",
                    "ionek_f_two_c_twods.ecl": "TestingSuite/Clustering/Datasets/ionek_f_two_c_twoDS.ecl.html",
                    "ionek_f_twofiftysix_c_eightds.ecl": "TestingSuite/Clustering/Datasets/ionek_f_twofiftysix_c_eightDS.ecl.html",
                    "ionek_f_thirty_two_c_eightds.ecl": "TestingSuite/Clustering/Datasets/ionek_f_thirty_two_c_eightDS.ecl.html",
                    "ionek_f_fiveonetwo_c_twods.ecl": "TestingSuite/Clustering/Datasets/ionek_f_fiveonetwo_c_twoDS.ecl.html",
                    "ionek_f_eight_c_sixds.ecl": "TestingSuite/Clustering/Datasets/ionek_f_eight_c_sixDS.ecl.html"
                },
                "testkmeans.ecl": "TestingSuite/Clustering/TestKMeans.ecl.html"
            }
        },
        "ml": {
            "nearestneighborssearch.ecl": "ML/NearestNeighborsSearch.ecl.html",
            "ensemble.ecl": "ML/Ensemble.ecl.html",
            "sampling.ecl": "ML/Sampling.ecl.html",
            "neuralnetworks.ecl": "ML/NeuralNetworks.ecl.html",
            "trees.ecl": "ML/Trees.ecl.html",
            "lsa": {
                "tests": {
                    "docretreival.ecl": "ML/LSA/Tests/DocRetreival.ecl.html",
                    "classifybysvm.ecl": "ML/LSA/Tests/ClassifyBySVM.ecl.html",
                    "largeperformance.ecl": "ML/LSA/Tests/LargePerformance.ecl.html",
                    "classifybyknn.ecl": "ML/LSA/Tests/ClassifyByKNN.ecl.html",
                    "knn_dotprod.ecl": "ML/LSA/Tests/KNN_DotProd.ecl.html",
                    "clustering.ecl": "ML/LSA/Tests/Clustering.ecl.html",
                    "randomtest.ecl": "ML/LSA/Tests/Randomtest.ecl.html",
                    "test.ecl": "ML/LSA/Tests/Test.ecl.html"
                },
                "lsa.ecl": "ML/LSA/lsa.ecl.html",
                "randomisedsvd.ecl": "ML/LSA/RandomisedSVD.ecl.html",
                "similarity.ecl": "ML/LSA/Similarity.ecl.html",
                "densesvd": {
                    "eig.ecl": "ML/LSA/DenseSVD/Eig.ecl.html",
                    "qr.ecl": "ML/LSA/DenseSVD/QR.ecl.html",
                    "svd.ecl": "ML/LSA/DenseSVD/SVD.ecl.html",
                    "eigc.ecl": "ML/LSA/DenseSVD/EigC.ecl.html",
                    "lapack_dsyev.ecl": "ML/LSA/DenseSVD/lapack_dsyev.ecl.html",
                    "helpers.ecl": "ML/LSA/DenseSVD/Helpers.ecl.html",
                    "eigen_dsyev.ecl": "ML/LSA/DenseSVD/eigen_dsyev.ecl.html"
                }
            },
            "config.ecl": "ML/Config.ecl.html",
            "naivebayes.ecl": "ML/NaiveBayes.ecl.html",
            "tests": {
                "benchmarks": {
                    "classify_sparse_logisticregression.ecl": "ML/Tests/Benchmarks/Classify_Sparse_LogisticRegression.ecl.html",
                    "classify_dense_logisticregression.ecl": "ML/Tests/Benchmarks/Classify_Dense_LogisticRegression.ecl.html",
                    "cluster_doc.ecl": "ML/Tests/Benchmarks/Cluster_doc.ecl.html"
                },
                "deprecated": {
                    "bwr_testagglo.ecl": "ML/Tests/Deprecated/BWR_testAgglo.ecl.html",
                    "bwr_testmlaggregatesntilesfunctions.ecl": "ML/Tests/Deprecated/BWR_testMLAggregatesNTilesFunctions.ecl.html",
                    "bwr_testclassifylogistic.ecl": "ML/Tests/Deprecated/BWR_testClassifyLogistic.ecl.html",
                    "bwr_testranked.ecl": "ML/Tests/Deprecated/BWR_testRanked.ecl.html",
                    "chickweight.ecl": "ML/Tests/Deprecated/ChickWeight.ecl.html",
                    "irisplantds.ecl": "ML/Tests/Deprecated/IrisPlantDS.ecl.html",
                    "bwr_testmlaggregates.ecl": "ML/Tests/Deprecated/BWR_testMLAggregates.ecl.html",
                    "bwr_testgendata.ecl": "ML/Tests/Deprecated/BWR_testGenData.ecl.html",
                    "bwr_testbucketfunctions.ecl": "ML/Tests/Deprecated/BWR_testBucketFunctions.ecl.html",
                    "bwr_testmlaggregatescardinality.ecl": "ML/Tests/Deprecated/BWR_testMLAggregatesCardinality.ecl.html",
                    "bwr_testregression.ecl": "ML/Tests/Deprecated/BWR_testRegression.ecl.html",
                    "bwr_testregressionpoly.ecl": "ML/Tests/Deprecated/BWR_testRegressionPoly.ecl.html"
                },
                "validation": {
                    "eig.ecl": "ML/Tests/Validation/eig.ecl.html",
                    "mahout_k-means_synthetic_control.ecl": "ML/Tests/Validation/mahout_k-means_synthetic_control.ecl.html",
                    "lda_cmpr2blei.ecl": "ML/Tests/Validation/lda_cmpr2blei.ecl.html",
                    "validate_gammas.ecl": "ML/Tests/Validation/Validate_Gammas.ecl.html",
                    "lanczos.ecl": "ML/Tests/Validation/Lanczos.ecl.html",
                    "concord.ecl": "ML/Tests/Validation/Concord.ecl.html",
                    "pca.ecl": "ML/Tests/Validation/Pca.ecl.html"
                },
                "explanatory": {
                    "assocrandom.ecl": "ML/Tests/Explanatory/AssocRandom.ecl.html",
                    "monkds.ecl": "ML/Tests/Explanatory/MonkDS.ecl.html",
                    "sparseautoencoder_mnist_error.ecl": "ML/Tests/Explanatory/SparseAutoencoder_MNIST_Error.ecl.html",
                    "stepwiselogistic.ecl": "ML/Tests/Explanatory/StepwiseLogistic.ecl.html",
                    "association_marvel_comics.ecl": "ML/Tests/Explanatory/Association_Marvel_Comics.ecl.html",
                    "10crossvalidation.ecl": "ML/Tests/Explanatory/10CrossValidation.ecl.html",
                    "classify2.ecl": "ML/Tests/Explanatory/Classify2.ecl.html",
                    "samplingds.ecl": "ML/Tests/Explanatory/samplingDS.ecl.html",
                    "knn_kdtree.ecl": "ML/Tests/Explanatory/KNN_KDTree.ecl.html",
                    "fieldaggregate.ecl": "ML/Tests/Explanatory/FieldAggregate.ecl.html",
                    "association.ecl": "ML/Tests/Explanatory/Association.ecl.html",
                    "neuralnetworksclassifier_cancerdata_test.ecl": "ML/Tests/Explanatory/NeuralNetworksClassifier_CancerData_test.ecl.html",
                    "cluster.ecl": "ML/Tests/Explanatory/Cluster.ecl.html",
                    "neuralnetworks_test.ecl": "ML/Tests/Explanatory/NeuralNetworks_test.ecl.html",
                    "distribution3.ecl": "ML/Tests/Explanatory/Distribution3.ecl.html",
                    "decisiontree.ecl": "ML/Tests/Explanatory/DecisionTree.ecl.html",
                    "adultds.ecl": "ML/Tests/Explanatory/AdultDS.ecl.html",
                    "discretize.ecl": "ML/Tests/Explanatory/Discretize.ecl.html",
                    "logisticregressionstatistics.ecl": "ML/Tests/Explanatory/LogisticRegressionStatistics.ecl.html",
                    "bwr_testofregressionols_lubothdenseandsparse.ecl": "ML/Tests/Explanatory/BWR_testOfRegressionOLS_LUBothDenseAndSparse.ecl.html",
                    "stepregressionexample.ecl": "ML/Tests/Explanatory/StepRegressionExample.ecl.html",
                    "foldtest.ecl": "ML/Tests/Explanatory/FoldTest.ecl.html",
                    "sparseautoencoder_mnist_test_detailed.ecl": "ML/Tests/Explanatory/SparseAutoencoder_MNIST_test_detailed.ecl.html",
                    "linearregressionstatistics.ecl": "ML/Tests/Explanatory/LinearRegressionStatistics.ecl.html",
                    "regressionpoly.ecl": "ML/Tests/Explanatory/RegressionPoly.ecl.html",
                    "binaryc45vertical.ecl": "ML/Tests/Explanatory/BinaryC45Vertical.ecl.html",
                    "discretefield.ecl": "ML/Tests/Explanatory/DiscreteField.ecl.html",
                    "distribution2.ecl": "ML/Tests/Explanatory/Distribution2.ecl.html",
                    "bwr_classifytext.ecl": "ML/Tests/Explanatory/BWR_ClassifyText.ecl.html",
                    "softmax_mnistdataset.ecl": "ML/Tests/Explanatory/SoftMax_MNISTdataset.ecl.html",
                    "naive_bayes.ecl": "ML/Tests/Explanatory/Naive_Bayes.ecl.html",
                    "binaryc45iris.ecl": "ML/Tests/Explanatory/BinaryC45Iris.ecl.html",
                    "doc.ecl": "ML/Tests/Explanatory/Doc.ecl.html",
                    "classify.ecl": "ML/Tests/Explanatory/Classify.ecl.html",
                    "irisds.ecl": "ML/Tests/Explanatory/IrisDS.ecl.html",
                    "codingdatamodel.ecl": "ML/Tests/Explanatory/codingDataModel.ecl.html",
                    "softmax_cancerdataset.ecl": "ML/Tests/Explanatory/SoftMax_CancerDataset.ecl.html",
                    "neuralnetworksclassifier_mnist_test.ecl": "ML/Tests/Explanatory/NeuralNetworksClassifier_MNIST_test.ecl.html",
                    "stacked_sparseautoencoder_mnist_test.ecl": "ML/Tests/Explanatory/Stacked_SparseAutoencoder_MNIST_test.ecl.html",
                    "randomforest.ecl": "ML/Tests/Explanatory/RandomForest.ecl.html",
                    "bwr_agglo.ecl": "ML/Tests/Explanatory/BWR_Agglo.ecl.html",
                    "classify_logistic.ecl": "ML/Tests/Explanatory/classify_logistic.ecl.html",
                    "randomforestcontinuous.ecl": "ML/Tests/Explanatory/RandomForestContinuous.ecl.html",
                    "discretize2.ecl": "ML/Tests/Explanatory/Discretize2.ecl.html",
                    "numericfield.ecl": "ML/Tests/Explanatory/NumericField.ecl.html",
                    "sparsenaivebayes.ecl": "ML/Tests/Explanatory/SparseNaiveBayes.ecl.html",
                    "sparseautoencoder_test.ecl": "ML/Tests/Explanatory/SparseAutoencoder_test.ecl.html",
                    "regression2.ecl": "ML/Tests/Explanatory/Regression2.ecl.html",
                    "samplingtest.ecl": "ML/Tests/Explanatory/SamplingTest.ecl.html",
                    "stacked_sparseautoencoder_test.ecl": "ML/Tests/Explanatory/Stacked_SparseAutoencoder_test.ecl.html",
                    "regression.ecl": "ML/Tests/Explanatory/Regression.ecl.html",
                    "sparseautoencoder_mnist_test.ecl": "ML/Tests/Explanatory/SparseAutoencoder_MNIST_test.ecl.html",
                    "distribution.ecl": "ML/Tests/Explanatory/Distribution.ecl.html",
                    "sparseautoencoder_cancerdataset_test.ecl": "ML/Tests/Explanatory/SparseAutoencoder_Cancerdataset_test.ecl.html",
                    "qr_decomposition.ecl": "ML/Tests/Explanatory/QR_Decomposition.ecl.html",
                    "softmax.ecl": "ML/Tests/Explanatory/SoftMax.ecl.html",
                    "neuralnetworksclassifier_test.ecl": "ML/Tests/Explanatory/NeuralNetworksClassifier_test.ecl.html",
                    "kdtrees.ecl": "ML/Tests/Explanatory/KDTrees.ecl.html"
                }
            },
            "stepregression": {
                "bidirecregression.ecl": "ML/StepRegression/BidirecRegression.ecl.html",
                "forwardregression.ecl": "ML/StepRegression/ForwardRegression.ecl.html",
                "backwardregression.ecl": "ML/StepRegression/BackwardRegression.ecl.html",
                "stepregression.ecl": "ML/StepRegression/StepRegression.ecl.html"
            },
            "appendid.ecl": "ML/AppendID.ecl.html",
            "populationestimate.ecl": "ML/PopulationEstimate.ecl.html",
            "svm": {
                "types.ecl": "ML/SVM/Types.ecl.html",
                "libsvm": {
                    "types.ecl": "ML/SVM/LibSVM/Types.ecl.html",
                    "constants.ecl": "ML/SVM/LibSVM/Constants.ecl.html",
                    "svm_cross_validate.ecl": "ML/SVM/LibSVM/svm_cross_validate.ecl.html",
                    "svm_train.ecl": "ML/SVM/LibSVM/svm_train.ecl.html",
                    "test": {
                        "run_heart_scale.ecl": "ML/SVM/LibSVM/Test/run_heart_scale.ecl.html",
                        "file_conversion.ecl": "ML/SVM/LibSVM/Test/file_conversion.ecl.html"
                    },
                    "svm_predict.ecl": "ML/SVM/LibSVM/svm_predict.ecl.html",
                    "libsvm_version.ecl": "ML/SVM/LibSVM/LibSVM_Version.ecl.html",
                    "converted.ecl": "ML/SVM/LibSVM/Converted.ecl.html"
                },
                "scale_instance.ecl": "ML/SVM/scale_instance.ecl.html",
                "scale_factors.ecl": "ML/SVM/scale_factors.ecl.html",
                "grid_search.ecl": "ML/SVM/grid_search.ecl.html",
                "train.ecl": "ML/SVM/train.ecl.html",
                "cross_validate.ecl": "ML/SVM/cross_validate.ecl.html",
                "predict.ecl": "ML/SVM/predict.ecl.html",
                "converted.ecl": "ML/SVM/Converted.ecl.html"
            },
            "version.ecl": "ML/Version.ecl.html",
            "generate.ecl": "ML/Generate.ecl.html",
            "docs": {
                "types.ecl": "ML/Docs/Types.ecl.html",
                "porterstemc.ecl": "ML/Docs/PorterStemC.ecl.html",
                "tokenize.ecl": "ML/Docs/Tokenize.ecl.html",
                "colocation.ecl": "ML/Docs/CoLocation.ecl.html",
                "porterstem.ecl": "ML/Docs/PorterStem.ecl.html",
                "trans.ecl": "ML/Docs/Trans.ecl.html"
            },
            "nfoldcrossvalidation.ecl": "ML/NFoldCrossValidation.ecl.html",
            "types.ecl": "ML/Types.ecl.html",
            "classify.ecl": "ML/Classify.ecl.html",
            "stepwiselogistic": {
                "typessl.ecl": "ML/StepwiseLogistic/TypesSL.ecl.html",
                "backward.ecl": "ML/StepwiseLogistic/Backward.ecl.html",
                "bidirectional.ecl": "ML/StepwiseLogistic/Bidirectional.ecl.html",
                "forward.ecl": "ML/StepwiseLogistic/Forward.ecl.html",
                "steplogistic.ecl": "ML/StepwiseLogistic/StepLogistic.ecl.html"
            },
            "cluster.ecl": "ML/Cluster.ecl.html",
            "fromfield.ecl": "ML/FromField.ecl.html",
            "lazy.ecl": "ML/Lazy.ecl.html",
            "correlate.ecl": "ML/Correlate.ecl.html",
            "associate.ecl": "ML/Associate.ecl.html",
            "tofield.ecl": "ML/ToField.ecl.html",
            "regress_poly_x.ecl": "ML/Regress_Poly_X.ecl.html",
            "discretize.ecl": "ML/Discretize.ecl.html",
            "deeplearning.ecl": "ML/DeepLearning.ecl.html",
            "utils.ecl": "ML/Utils.ecl.html",
            "distribution.ecl": "ML/Distribution.ecl.html",
            "regression": {
                "dense": {
                    "ols.ecl": "ML/Regression/Dense/OLS.ecl.html",
                    "ols_cholesky.ecl": "ML/Regression/Dense/OLS_Cholesky.ecl.html",
                    "ols_lu.ecl": "ML/Regression/Dense/OLS_LU.ecl.html"
                },
                "predict.ecl": "ML/Regression/Predict.ecl.html",
                "sparse": {
                    "ols.ecl": "ML/Regression/Sparse/OLS.ecl.html",
                    "ols_cholesky.ecl": "ML/Regression/Sparse/OLS_Cholesky.ecl.html",
                    "ols_lu.ecl": "ML/Regression/Sparse/OLS_LU.ecl.html"
                },
                "iregression.ecl": "ML/Regression/IRegression.ecl.html"
            },
            "mat": {
                "householder.ecl": "ML/Mat/Householder.ecl.html",
                "types.ecl": "ML/Mat/Types.ecl.html",
                "mu.ecl": "ML/Mat/MU.ecl.html",
                "lowertriangle.ecl": "ML/Mat/LowerTriangle.ecl.html",
                "scale.ecl": "ML/Mat/Scale.ecl.html",
                "pca.ecl": "ML/Mat/Pca.ecl.html",
                "inv.ecl": "ML/Mat/Inv.ecl.html",
                "vec.ecl": "ML/Mat/Vec.ecl.html",
                "sub.ecl": "ML/Mat/Sub.ecl.html",
                "debug.ecl": "ML/Mat/Debug.ecl.html",
                "eig.ecl": "ML/Mat/eig.ecl.html",
                "substitute.ecl": "ML/Mat/Substitute.ecl.html",
                "rounddelta.ecl": "ML/Mat/RoundDelta.ecl.html",
                "svd.ecl": "ML/Mat/Svd.ecl.html",
                "rankelements.ecl": "ML/Mat/RankElements.ecl.html",
                "mul.ecl": "ML/Mat/Mul.ecl.html",
                "det.ecl": "ML/Mat/Det.ecl.html",
                "mahalanobis.ecl": "ML/Mat/Mahalanobis.ecl.html",
                "cov.ecl": "ML/Mat/Cov.ecl.html",
                "randmat.ecl": "ML/Mat/RandMat.ecl.html",
                "setdimension.ecl": "ML/Mat/SetDimension.ecl.html",
                "add.ecl": "ML/Mat/Add.ecl.html",
                "pow.ecl": "ML/Mat/Pow.ecl.html",
                "insertcolumn.ecl": "ML/Mat/InsertColumn.ecl.html",
                "strict.ecl": "ML/Mat/Strict.ecl.html",
                "thin.ecl": "ML/Mat/Thin.ecl.html",
                "is.ecl": "ML/Mat/Is.ecl.html",
                "each.ecl": "ML/Mat/Each.ecl.html",
                "repmat.ecl": "ML/Mat/Repmat.ecl.html",
                "eq.ecl": "ML/Mat/Eq.ecl.html",
                "trans.ecl": "ML/Mat/Trans.ecl.html",
                "has.ecl": "ML/Mat/Has.ecl.html",
                "identity.ecl": "ML/Mat/Identity.ecl.html",
                "uppertriangle.ecl": "ML/Mat/UpperTriangle.ecl.html",
                "decomp.ecl": "ML/Mat/Decomp.ecl.html",
                "lanczos.ecl": "ML/Mat/Lanczos.ecl.html"
            },
            "dmat": {
                "decomp.ecl": "ML/DMat/Decomp.ecl.html",
                "add.ecl": "ML/DMat/Add.ecl.html",
                "identity.ecl": "ML/DMat/Identity.ecl.html",
                "scale.ecl": "ML/DMat/Scale.ecl.html",
                "mul.ecl": "ML/DMat/Mul.ecl.html",
                "sub.ecl": "ML/DMat/Sub.ecl.html",
                "inv.ecl": "ML/DMat/Inv.ecl.html",
                "converted.ecl": "ML/DMat/Converted.ecl.html",
                "trans.ecl": "ML/DMat/Trans.ecl.html"
            },
            "fieldaggregates.ecl": "ML/FieldAggregates.ecl.html"
        },
        "ts": {
            "types.ecl": "TS/Types.ecl.html",
            "extendedparameters.ecl": "TS/ExtendedParameters.ecl.html",
            "forecast.ecl": "TS/Forecast.ecl.html",
            "diagnosis.ecl": "TS/Diagnosis.ecl.html",
            "extract_ts.ecl": "TS/extract_ts.ecl.html",
            "estimatedobs.ecl": "TS/EstimatedObs.ecl.html",
            "lagcorrelations.ecl": "TS/LagCorrelations.ecl.html",
            "estimation.ecl": "TS/Estimation.ecl.html",
            "differenceseries.ecl": "TS/DifferenceSeries.ecl.html",
            "demo": {
                "bwr_demo_identification.ecl": "TS/Demo/BWR_Demo_Identification.ecl.html",
                "bwr_demo_estimate.ecl": "TS/Demo/BWR_Demo_Estimate.ecl.html",
                "series_data.ecl": "TS/Demo/Series_Data.ecl.html",
                "bwr_compare_2_r_arima.ecl": "TS/Demo/BWR_Compare_2_R_ARIMA.ecl.html"
            },
            "accumseries.ecl": "TS/AccumSeries.ecl.html",
            "seriesbymodel.ecl": "TS/SeriesByModel.ecl.html",
            "identification.ecl": "TS/Identification.ecl.html",
            "season_adj.ecl": "TS/season_adj.ecl.html"
        },
        "bundle.ecl": "Bundle.ecl.html"
    }
}